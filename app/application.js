// Generated by CoffeeScript 1.3.3
var DISPLAY_FORMAT, Item, STORE_FORMAT, WorkLogApp,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

DISPLAY_FORMAT = "MM/DD";

STORE_FORMAT = "YYYY/MM/DD Z";

Item = (function(_super) {

  __extends(Item, _super);

  Item.prototype.events = {
    "click .destroy": "remove"
  };

  function Item() {
    this.remove = __bind(this.remove, this);

    this.render = __bind(this.render, this);
    Item.__super__.constructor.apply(this, arguments);
    this.instance.bind("destroy", this.release);
  }

  Item.prototype.render = function() {
    return this.replace($("#itemTemplate").tmpl(this.instance));
  };

  Item.prototype.remove = function() {
    return this.instance.destroy();
  };

  return Item;

})(Spine.Controller);

WorkLogApp = (function(_super) {

  __extends(WorkLogApp, _super);

  WorkLogApp.prototype.events = {
    "keypress form input": "create",
    "focus form input[name='task']": "load_suggest",
    "click a.change_date": "change_date"
  };

  WorkLogApp.prototype.elements = {
    ".items": "items",
    ".errors": "error_messages",
    "form#entry_log": "form",
    "input[name='task']": "task_field",
    "#displayed_date": "displayed_date",
    "#previews_date": "previews_date",
    "#next_date": "next_date"
  };

  function WorkLogApp() {
    this.draw_graph = __bind(this.draw_graph, this);

    this.addAll = __bind(this.addAll, this);

    this.addOne = __bind(this.addOne, this);
    WorkLogApp.__super__.constructor.apply(this, arguments);
    this.selected_date = moment().local().sod();
    this.refresh_date_element_by(this.selected_date);
    WorkLog.bind("save", this.addOne);
    WorkLog.bind("refresh", this.addAll);
    WorkLog.bind("refresh save", this.draw_graph);
    WorkLog.fetch();
  }

  WorkLogApp.prototype.addOne = function(work_log) {
    var view;
    view = new Item({
      instance: work_log
    });
    return this.items.append(view.render());
  };

  WorkLogApp.prototype.addAll = function() {
    var work_log, _i, _len, _ref, _results;
    _ref = WorkLog.by_date(this.selected_date.format(STORE_FORMAT));
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      work_log = _ref[_i];
      _results.push(this.addOne(work_log));
    }
    return _results;
  };

  WorkLogApp.prototype.create = function(e) {
    var error, worklog, _i, _len, _ref, _results;
    if (press_enter_key(e)) {
      e.preventDefault();
      this.error_messages.empty();
      worklog = WorkLog.fromForm(this.form);
      worklog.date = this.selected_date.clone().format(STORE_FORMAT);
      if (worklog.save()) {
        return clear(this.form);
      } else {
        _ref = worklog.errors;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          error = _ref[_i];
          _results.push(this.error_messages.append("<li>" + error + "</li>"));
        }
        return _results;
      }
    }
  };

  WorkLogApp.prototype.load_suggest = function(e) {
    return this.task_field.autocomplete({
      source: WorkLog.tasks()
    });
  };

  WorkLogApp.prototype.change_date = function(e) {
    switch (e.currentTarget) {
      case this.previews_date[0]:
        this.selected_date.add('days', -1);
        break;
      case this.next_date[0]:
        this.selected_date.add('days', 1);
    }
    this.refresh_date_element_by(this.selected_date);
    this.items.empty();
    return this.addAll();
  };

  WorkLogApp.prototype.refresh_date_element_by = function(date) {
    this.displayed_date[0].innerText = date.format(DISPLAY_FORMAT);
    this.previews_date[0].innerText = date.clone().add('days', -1).format(DISPLAY_FORMAT);
    return this.next_date[0].innerText = date.clone().add('days', 1).format(DISPLAY_FORMAT);
  };

  WorkLogApp.prototype.draw_graph = function() {
    var data, myChart, work_log, work_logs, _i, _len;
    work_logs = WorkLog.by_date(this.selected_date.format(STORE_FORMAT));
    if (work_logs.length > 0) {
      data = [];
      for (_i = 0, _len = work_logs.length; _i < _len; _i++) {
        work_log = work_logs[_i];
        data.push([work_log.task, work_log.time]);
      }
      myChart = new JSChart("graph", "pie");
      myChart.setDataArray(data);
      myChart.setTitle('ã€€');
      myChart.setTitleColor('#8E8E8E');
      myChart.setTitleFontSize(11);
      myChart.setTextPaddingTop(30);
      myChart.setSize(616, 321);
      myChart.setPiePosition(240, 120);
      myChart.setPieRadius(85);
      myChart.setPieUnitsColor("#555");
      return myChart.draw();
    }
  };

  return WorkLogApp;

})(Spine.Controller);

$(function() {
  return new WorkLogApp({
    el: "#work_logs"
  });
});
