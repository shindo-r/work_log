// Generated by CoffeeScript 1.3.3
var TIME_MATCHER, WorkLog,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

TIME_MATCHER = "([0-9]{2}):([0-9]{2})";

WorkLog = (function(_super) {

  __extends(WorkLog, _super);

  WorkLog.configure("WorkLog", "task", "from", "to", "time", "date");

  WorkLog.extend(Spine.Model.Local);

  WorkLog.prototype.validations = {
    "'Task' is required": function() {
      return !this.task;
    },
    "'From' is required": function() {
      return !this.from;
    },
    "'To' is required": function() {
      return !this.to;
    },
    "'From' should need a format like '14:30'": function() {
      if (this.from) {
        return !this.from.match(TIME_MATCHER);
      }
    },
    "'To' should need a format like '14:30'": function() {
      if (this.to) {
        return !this.to.match(TIME_MATCHER);
      }
    },
    "'From' should be smaller than 'To'": function() {
      if (this.from && this.to && this.from.match(TIME_MATCHER) && this.to.match(TIME_MATCHER)) {
        return this.is_from_bigger_than_to();
      }
    }
  };

  WorkLog.tasks = function() {
    return unique($.map(this.all(), function(work_log, i) {
      return work_log.task;
    }));
  };

  WorkLog.by_date = function(date) {
    return this.findAllByAttribute("date", date);
  };

  function WorkLog() {
    WorkLog.__super__.constructor.apply(this, arguments);
    this.bind("beforeSave", this.calc_time);
  }

  WorkLog.prototype.calc_time = function() {
    var hour, minute;
    hour = this.hour_of(this.to) - this.hour_of(this.from);
    minute = this.minute_of(this.to) - this.minute_of(this.from);
    if (minute < 0) {
      minute = 60 + minute;
    }
    return this.time = hour + (minute / 60);
  };

  WorkLog.prototype.hour_of = function(time) {
    return time.match(TIME_MATCHER)[1];
  };

  WorkLog.prototype.minute_of = function(time) {
    return time.match(TIME_MATCHER)[2];
  };

  WorkLog.prototype.is_from_bigger_than_to = function() {
    return (this.hour_of(this.to) < this.hour_of(this.from)) || (this.hour_of(this.to) === this.hour_of(this.from) && this.minute_of(this.to) <= this.minute_of(this.from));
  };

  return WorkLog;

})(Spine.Model);
