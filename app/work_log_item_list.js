// Generated by CoffeeScript 1.3.3
var STORE_FORMAT, WorkLogItemList,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

STORE_FORMAT = "YYYY/MM/DD Z";

WorkLogItemList = (function(_super) {

  __extends(WorkLogItemList, _super);

  WorkLogItemList.prototype.target_date = moment().local().sod();

  WorkLogItemList.prototype.events = {
    "keypress form input": "create",
    "focus form input[name='task']": "load_suggest"
  };

  WorkLogItemList.prototype.elements = {
    ".items": "items",
    ".errors": "error_messages",
    "form#entry_log": "form",
    "input[name='task']": "task_field"
  };

  function WorkLogItemList() {
    this.addAll = __bind(this.addAll, this);

    this.addOne = __bind(this.addOne, this);
    WorkLogItemList.__super__.constructor.apply(this, arguments);
    WorkLog.bind("save", this.addOne);
    WorkLog.bind("refresh", this.addAll);
    WorkLog.fetch();
  }

  WorkLogItemList.prototype.refresh_by = function(target_date) {
    this.target_date = target_date;
    this.items.empty();
    return this.addAll();
  };

  WorkLogItemList.prototype.addOne = function(work_log) {
    var view;
    view = new Item({
      instance: work_log
    });
    return this.items.append(view.render());
  };

  WorkLogItemList.prototype.addAll = function() {
    var work_log, _i, _len, _ref, _results;
    _ref = WorkLog.by_date(this.target_date.format(STORE_FORMAT));
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      work_log = _ref[_i];
      _results.push(this.addOne(work_log));
    }
    return _results;
  };

  WorkLogItemList.prototype.create = function(e) {
    var error, worklog, _i, _len, _ref, _results;
    if (press_enter_key(e)) {
      e.preventDefault();
      this.error_messages.empty();
      worklog = WorkLog.fromForm(this.form);
      worklog.date = this.target_date.clone().format(STORE_FORMAT);
      if (worklog.save()) {
        return clear(this.form);
      } else {
        _ref = worklog.errors;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          error = _ref[_i];
          _results.push(this.error_messages.append("<li>" + error + "</li>"));
        }
        return _results;
      }
    }
  };

  WorkLogItemList.prototype.load_suggest = function(e) {
    return this.task_field.autocomplete({
      source: WorkLog.tasks()
    });
  };

  return WorkLogItemList;

})(Spine.Controller);
